#!/bin/bash
set -exu

root_dir="${PWD}"

# Inputs
RELEASE_NAME="${RELEASE_NAME:?"\$RELEASE_NAME not set"}"
RUNTIME_CI_DIR="${root_dir}/${RUNTIME_CI_DIR:?"\$RUNTIME_CI_DIR not set"}"
RELEASE_REPO_DIR="${root_dir}/${RELEASE_REPO_DIR:?"\$RELEASE_REPO_DIR not set"}"

set +x
GCP_NATS_BLOBSTORE_SERVICE_ACCOUNT_KEY="${GCP_NATS_BLOBSTORE_SERVICE_ACCOUNT_KEY:?"\$GCP_NATS_BLOBSTORE_SERVICE_ACCOUNT_KEY not set"}"
set -x

# Outputs
FINAL_RELEASE_REPO_DIR="${root_dir}/${FINAL_RELEASE_REPO_DIR:?"\$FINAL_RELEASE_REPO_DIR not set"}"

MASTER_BRANCH="${MASTER_BRANCH:-master}"

FORMATTED_KEY="$(sed 's/^/      /' <(echo $GCP_NATS_BLOBSTORE_SERVICE_ACCOUNT_KEY))"

set +x
cat > "${RELEASE_REPO_DIR}/config/private.yml" <<EOF
---
blobstore:
  options:
    credentials_source: static
    json_key: |
$FORMATTED_KEY
EOF
set -x

pushd release-repo > /dev/null
  git config user.name "${GIT_COMMIT_USERNAME}"
  git config user.email "${GIT_COMMIT_EMAIL}"

  git remote add -f master-repo ../release-repo-master
  git merge "master-repo/${MASTER_BRANCH}" -m 'Merge with master'

  for _ in {1..5}; do
    bosh -n create-release --final
    EXIT_STATUS=${PIPESTATUS[0]}
    if [ "$EXIT_STATUS" = "0" ]; then
      break
    fi
  done

  if [ ! "$EXIT_STATUS" = "0" ]; then
    echo "Failed to Create $RELEASE_NAME Release"
    exit "$EXIT_STATUS"
  fi

  new_release_version=$(find releases -regex ".*${RELEASE_NAME}-[0-9]*.yml" | egrep -o "${RELEASE_NAME}-[0-9]+" | egrep -o "[0-9]+" | sort -n | tail -n 1)

  git add .final_builds releases
  git commit -m "Final release ${new_release_version}"
  echo "${new_release_version}" > version_number
popd > /dev/null

shopt -s dotglob
cp -R release-repo/* "${FINAL_RELEASE_REPO_DIR}"
