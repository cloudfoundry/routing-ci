#!/bin/bash
set -e -x

source ~/.bashrc

root_dir=${PWD}
OUTPUT_DIR=${root_dir}/cf-release-tarball

cd $CF_RELEASE_DIR
git_describe_output=$(git describe --long --tags)
# major is the major version without the leading `v`
major=$(echo "${git_describe_output}" | cut -f1 -d- | cut -c 2-)
trimmed_major=${major%.*}
minor=$(echo "${git_describe_output}" | cut -f2 -d-)
timestamp=$(date +%s)
NEW_VERSION=$trimmed_major.$minor.$timestamp

COMMIT_SHA=$(git rev-parse HEAD)

scripts/test

CF_RELEASE_OUT="../create-release.out"
for i in {1..5}; do
  echo "Syncing blobs, attempt $i"
  bosh -n --parallel 10 sync blobs && break
done

CF_SHA=$(git rev-parse --short HEAD)

# GoRouter
pushd ../routing-release
  ROUTING_SHA="$(git rev-parse --short HEAD)"
popd
pushd src/routing-release
  echo "Checking out routing release sha: $ROUTING_SHA"
  git checkout develop
  git pull -r
  git checkout $ROUTING_SHA
  ./scripts/update
popd

VERSION="${NEW_VERSION}+cf-${CF_SHA}.go-${ROUTING_SHA}"

bosh -v
for i in {1..5}; do
  echo "Creating release, attempt $i"
  bosh -n create release --version $VERSION --with-tarball --force | tee -a $CF_RELEASE_OUT
  EXIT_STATUS=${PIPESTATUS[0]}
  if [ "$EXIT_STATUS" = "0" ]; then
    break
  fi
done

if [ ! "$EXIT_STATUS" = "0" ]; then
  echo "Failed to Create CF Release"
  exit $EXIT_STATUS
fi

TARBALL=`grep -a "Release tarball" $CF_RELEASE_OUT | cut -d " " -f4`
if [ "$TARBALL" = "" ]; then
  echo "No Release Tarball Found"
  exit 1
fi

mkdir -p output

mv $CF_RELEASE_OUT ./output/
# Need to combine cf-release sha and timestamp
mv $TARBALL $OUTPUT_DIR/cf-${COMMIT_SHA}-${VERSION}.tgz
